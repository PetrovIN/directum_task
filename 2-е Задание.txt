1-я функция выполняет роль поиска ключа. На вход подаются данные начала и конца массива, высчитывается середина, если ключ находится в правой половине массива, то левая часть отбрасывается, после этого продолжается поиск дальше, пока не найдется нужный элемент
Если же ключ находится в левой части массива, то все происходит также, но отбрасывается правая часть массива и продолжается поиск. Все это происходит рекурсивно, т.е повторяется до тех пор, пока не будет найден нужный ключ.
2-я функция создает сортированный массив из ключей. Если массив не заполнен, то в начало ему присваивается первая пара ключей, если же массив заполнен, то происходит сортировка. Если ключ меньше ключа, который сейчас находится на первой позиции, то он занимает его место.
Если ключ больше ключа, который находится на последнем месте массива, то он встает в конец массива. Если ключ больше начального и меньше конечного ключа массива, то ему ищется место в соотвествии с функцией 1. Также, если массив переполнен, то он расширяется. В конце к определенной позиции в массиве присвается пара ключ и значение.


static int Func1(KeyValuePair<int, string>[] a, int low, int high, int key)

{
	//Поиск середины массива
	int middle = low + ((high - low)/2);

	//если массив состоит из 1го значения
	if (low == high)

		return low;

	//если ключ больше ключа, который в середине, то левая часть массива отбрасывается и все повторяется заново.
	if (key > a[middle].Key)

		return Func1(a, middle + 1, high, key);

	//если ключ меньше ключа, который в середине, то правая часть массива отбрасывается и все повторяется заново
	return Func1(a, low, middle, key);

}

static void Func2(ref KeyValuePair<int, string>[] a, int key, string value)

{
	int pos;
	
	//инициализация объекта
	KeyValuePair<int, string> keyValuePair;

	//проверка длины массива
	if (a.Length == 0)

	{
		//если длина массива равна 0, то первой позиции присвается пара ключ, значение и массив расширяется
		Array.Resize(ref a, 1);

		//инициализация объекта
		keyValuePair = new KeyValuePair<int, string>(key, value);

		a[0] = keyValuePair;

		return;

	}
	//если ключ меньше ключа на первой позиции, то он занимает первую позицию в массиве
	if (key < a[0].Key)

		pos = 0;

	//если ключ больше ключа на конечной позиции, то он занимает конечную позицию в массиве
	else if (key > a[a.Length - 1].Key)

		pos = a.Length;

	//если ключ больше ключа начальной позиции и меньше ключа конечной позиции в массиве, то происходит поиск подходящей позиции в массиве при помощи функции 1
	else

		pos = Func1(a, 0, a.Length - 1, key);

	//происходит расширение массива
	Array.Resize(ref a, a.Length + 1);

	for (int i = a.Length - 1; i > pos; i--)

		a[i] = a[i - 1];

	//инициализация объекта
	keyValuePair = new KeyValuePair<int, string>(key, value);

	//позиции pos в массиве присваивается пара ключ, значение
	a[pos] = keyValuePair;

}